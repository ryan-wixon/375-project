---
title: "Final Project"
format: html
editor: visual
---

```{r}
# import library
library(readr) 

# reading in the dataframe we are working with
obesity <- read_csv("obes.csv") 

# show first 6 rows
head(obesity)
```

```{r}
# import library
library(dplyr)

# filtering the dataframe so it only displays rows that are in the years 2015-2019
obes <- filter(obesity, YearStart %in% c(2015, 2016, 2017, 2018, 2019))
obes
```

```{r}
# filters the dataframe to only include rows that have a Topic of Obesity 
obes <- filter(obes, Topic == 'Obesity')
obes
```

```{r}
# Arrange the dataframe by the LocationDesc column to sort the data alphabetically by location description
obes1 <- arrange(obes, LocationDesc)
obes1
```

```{r}
# select only the columns that are relevant to our analysis
obes2 <- obes1 %>%
  select(YearStart, LocationDesc, Question, Data_Value) 
obes2
```

```{r}
# Arrange the dataframe by the YearStart column to sort the data numerically by year
obes3 <- arrange(obes2, YearStart)
obes3
```

```{r}
# Drop na values and aggregate each row using means so that each state has 1 row for each year
obes3 <- na.omit(obes3)
obes3 <- obes3 %>% group_by(YearStart, LocationDesc) %>% summarize(Data_Value = mean(Data_Value))
obes3
```

```{r}
obes3 <- obes3 %>%
  rename(
    Date = YearStart, # Rename the YearStart column to 'Date' for clarity
    State = LocationDesc) # Rename the 'LocationDesc column to 'State' for clarity
obes3
```

```{r}
# read in second dataframe
ppi <- read_csv("ProductPriceIndex.csv")

# show first 5 rows
head(ppi) 
```

```{r}
# import library
library(lubridate)

# Create a new column 'Year' in the 'ppi' dataframe
# ymd(ppi$date): This function converts the 'date' column in 'ppi' to Date format (Year-Month-Day)
ppi$Year <- year(ymd(ppi$date))

# year(): This function extracts the year from the Date object created.
ppi
```

```{r}
# removes columns date, farmprice, and averagespread
ppi <-select(ppi, -date, -farmprice, -averagespread)
ppi
```

```{r}
# selects the column year and moves it to be the first column displayed and everything else after
ppi <-ppi %>%
  select(Year, everything())
ppi
```

```{r}
ppi2 <- ppi %>%
  rename(
    Georgia = atlantaretail, # renames atlantaretail column to Georgia
    Illinois = chicagoretail, # renames chicagoretail column to Illinois
    California = losangelesretail,# renames losangelesretail column to California
    NewYork = newyorkretail,# renames newyorkretail column to NewYork
    Date = Year) # renames Year column to Date 
ppi2
```

```{r}
# import libraries
library(tidyverse)

# Transform the dataframe from a wide format to a long format
# This function reshapes the dataframe so that columns Georgia, Illinois, California, and New York are combined into a single column 'State'.
# cols: Specifies the columns to pivot (Georgia, Illinois, California, NewYork).
# names_to: The new column name that will contain the original column names after transformation (State).
# values_to: The new column name for the data values from the original columns (Price).
ppi22 <- ppi2 %>%
  pivot_longer(cols = c(Georgia, Illinois, California, NewYork),
               names_to = "State",
               values_to = "Price")
ppi22
```

```{r}
# selects the columns so they are displayed in the order of Date, productname, State, Price
ppi22 <- ppi22%>%
  select(Date, productname, State, Price)
ppi22
```

```{r}
# Perform an inner join between the 'ppi22' and 'obes3' dataframes
# The result is a new dataframe 'join' that contains only rows where there is a match in the 'Date' and 'State' columns between 'ppi22' and 'obes3'.
join <- inner_join(ppi22, obes3)
join
```
``` {r}
# get and list the names of unique fruits and vegetables
product_names <- unique(join$productname)
for (i in 1:length(product_names)) {
  product_names[i] <- tolower(product_names[i])
  print(sprintf("%d: %s", i, product_names[i]))
}

# print out prompts for the user
print("Please choose 1 or more products to include in analysis")
print("Enter your choices as a comma separated list of numbers or names:")
```

``` {r}
# get the user input
user_input <- readline()
```

``` {r}
# validate user input
user_input <- strsplit(user_input, ",")[[1]]
valid_names <- c()
for (i in 1:length(user_input)) {
  
  # check the user input name for an item and add it too the list if it matches
  # one in the list
  if (tolower(trimws(user_input[i])) %in% product_names) {
    valid_names <- c(valid_names, tolower(trimws(user_input[i])))
  }
  
  # try to convert the string to a number, if it succeeds and is valid, add
  # the corresponding product to the list
  integer_format <- as.integer(tolower(trimws(user_input[i])))
  if (!is.na(integer_format) && integer_format > 0 && integer_format < 23) {
    valid_names <- c(valid_names, product_names[integer_format])
  }
}

# check to make sure there was at least one valid product specified, if there
# is not we will be unable to perform analysis, so quit immediately
if (length(valid_names) == 0) {
  stop("No valid fruit/vegetable names specified by user, quitting")
}
```

``` {r}
# update the elements in the database to match the names we just found
join$productname <- tolower(join$productname)

# now take the new list of names and filter the dataset accordingly
final_dataset <- join[join$productname %in% valid_names, ]
final_dataset
```

```{r}
# import libraries
library(ggplot2)

# Remove dollar signs from Price and convert to numeric
data_clean <- join %>% mutate(Price = as.numeric(gsub("\\$", "", Price)), 
  Data_Value = as.numeric(Data_Value)) %>%  # Convert Data_Value column to numeric
  filter(!is.na(Price) & !is.na(Data_Value)) %>%  # Filter out rows with missing Price or Data_Value
  
# Group by State column and summarize to get the average price and data value per state
group_by(State) %>% summarize(avg_price = mean(Price), avg_data_value = mean(Data_Value))

# Plotting the average price per state
ggplot(data_clean, aes(x = State, y = avg_price, fill = State)) +
  geom_col() + # Create a column plot for average price 
  geom_text(aes(label = round(avg_price, 2)))  # Add text showing exact values 
  labs(title = "Average Price per State", # label for title, x-axis, and y-axis
       y = "Average Price",
       x = "State")
```

```{r}
# Plotting the  average obesity percentage per state
ggplot(data_clean, aes(x = State, y = avg_data_value, fill = State)) +
  geom_col() + # Create a column plot for average obesity percentage
  geom_text(aes(label = round(avg_data_value, 2))) # Add text showing exact values 
  labs(title = "Average Obesity Perctange Per State", # label for title, x-axis, and y-axis
       y = "Average Obesity Perctange",
       x = "State")
```

``` {r}
correlation_dataset = final_dataset

# use regex to remove the $ from the price and convert it to a double
correlation_dataset$Price <- as.numeric(sub('.', '', correlation_dataset$Price))

# some rows include items with values recorded on different days of the
# same year, let's aggregate them so that the average values for each years are used
# instead so that it matches the obesity data
correlation_dataset <- correlation_dataset %>% group_by(Date, productname, State) %>% summarize(Price = mean(Price), Data_Value = mean(Data_Value))

# get the necessary columns for calculating the correlation
correlation_dataset <- correlation_dataset %>% select(productname, State, Price, Data_Value)

for (i in 1:length(valid_names)) {
  
  # remove all items except for the one currently being analyzed, and plot it
  single_item_correlation_dataset <- filter(correlation_dataset, productname == valid_names[i])
  plot(single_item_correlation_dataset$Price, single_item_correlation_dataset$Data_Value, xlab = paste("Price of", valid_names[i], "($)", sep = " "), ylab = "Obesity Rates (% of American Adults)", main = paste("Correlation:", cor(single_item_correlation_dataset$Price, single_item_correlation_dataset$Data_Value), sep=" "))
}

# make a correlation plot accounting for every item
plot(correlation_dataset$Price, correlation_dataset$Data_Value, xlab = "Price of all items ($)", ylab = "Obesity Rates (% of American Adults)", main = paste("Correlation:", cor(single_item_correlation_dataset$Price, single_item_correlation_dataset$Data_Value), sep=" "))
```